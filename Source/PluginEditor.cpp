/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TestAudioProcessorEditor::TestAudioProcessorEditor (TestAudioProcessor& p)
    : AudioProcessorEditor (&p), pluginProcessor (p)

{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (300, 300);
    
    // not the issue:
    addAndMakeVisible (&key);
    key.setSliderStyle (Slider::Rotary);
    key.setRange(0.0, 12.0, 1.0);
    key.setTextBoxStyle (Slider::TextBoxLeft, false, 140, 90);
    key.setValue(0.0);
    
    // these define the parameters of our slider object
    addAndMakeVisible (&mode);
    mode.setSliderStyle (Slider::Rotary);
    mode.setRange(0.0, 1.0, 1.0);
    mode.setTextBoxStyle (Slider::TextBoxLeft, false, 140, 90);
    mode.setTextValueSuffix();
    mode.setValue(0.0);

    addAndMakeVisible(&chordChooser);
    chordChooser.setSliderStyle (Slider::Rotary);
    chordChooser.setRange(0.0, 1.0, 1.0);
    chordChooser.setTextBoxStyle (Slider::TextBoxLeft, false, 140, 90);
    chordChooser.setValue(0.0);

    // chord mode button
    toggleChordMode.setButtonText("Chord mode");
    addAndMakeVisible(&toggleChordMode);

    // add the listener to the slider
    
    mode.addListener (this);
    key.addListener (this);
    chordChooser.addListener(this);
    toggleChordMode.addListener (this);
}

void TestAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if(slider == &key) {
        pluginProcessor.keySlider = key.getValue();
    }
    else if(slider == &mode) {
        pluginProcessor.modeSlider = mode.getValue();
    }
    else if(slider == &chordChooser) {
        pluginProcessor.chordChooser = chordChooser.getValue();
    }
}

void TestAudioProcessorEditor::buttonClicked(Button * button){

    pluginProcessor.chordMode = button->getToggleState();
}

TestAudioProcessorEditor::~TestAudioProcessorEditor()
{
}

//==============================================================================
void TestAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Midi Shrimp", getLocalBounds(), Justification::centred, 1);
    g.drawText("Key", 120, 30, 40, 40, Justification::left, true);
    g.drawText("Mode", 120, 80, 40, 40, Justification::left, true);
    g.drawText("Chord", 250, 200, 40, 40, Justification::left, true);
}

void TestAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    // sets the position and size of the slider with arguments (x, y, width, height)
    
    mode.setBounds (10, 80, 100, 40);
    key.setBounds (10, 30, 100, 40);
    chordChooser.setBounds(160, 200, 100, 40);
    toggleChordMode.setBounds (40, 200, 80, 80);
}
